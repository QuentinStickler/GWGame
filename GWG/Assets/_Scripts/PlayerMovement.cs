//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/PlayerMovement.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerMovement : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerMovement()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerMovement"",
    ""maps"": [
        {
            ""name"": ""Move"",
            ""id"": ""a052ba03-8210-4083-aa11-6b8d5dd09c55"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Value"",
                    ""id"": ""35f99b0c-fc91-4586-b961-81342dbcc699"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""4624b145-810f-44bf-b982-04b54082c9b9"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""f5e6ed23-55f6-4ce1-af1c-be7c20df50b3"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""56bcfb7b-23b3-4a7a-9cb7-8d1b0865c2cb"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""fa5ee093-c38e-473d-b686-af512d609803"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""7cd464ad-078a-4992-9e63-33b8a7719e0e"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""Specials"",
            ""id"": ""06da0266-457f-421f-b1c2-cfc6a36f3675"",
            ""actions"": [
                {
                    ""name"": ""HideUi"",
                    ""type"": ""Button"",
                    ""id"": ""fbe74365-1e6a-4086-bdbd-4e5d4fa6c0f8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Scan"",
                    ""type"": ""Button"",
                    ""id"": ""959dc8a2-9741-4ebc-a829-b13a0cc745b1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a3db7988-8c9e-4056-aa41-11a9ed962ab2"",
                    ""path"": ""<Keyboard>/h"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HideUi"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""57f2bf80-36cb-494c-8ea0-5030dd69105e"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Scan"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Move
        m_Move = asset.FindActionMap("Move", throwIfNotFound: true);
        m_Move_Newaction = m_Move.FindAction("New action", throwIfNotFound: true);
        // Specials
        m_Specials = asset.FindActionMap("Specials", throwIfNotFound: true);
        m_Specials_HideUi = m_Specials.FindAction("HideUi", throwIfNotFound: true);
        m_Specials_Scan = m_Specials.FindAction("Scan", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Move
    private readonly InputActionMap m_Move;
    private IMoveActions m_MoveActionsCallbackInterface;
    private readonly InputAction m_Move_Newaction;
    public struct MoveActions
    {
        private @PlayerMovement m_Wrapper;
        public MoveActions(@PlayerMovement wrapper) { m_Wrapper = wrapper; }
        public InputAction @Newaction => m_Wrapper.m_Move_Newaction;
        public InputActionMap Get() { return m_Wrapper.m_Move; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MoveActions set) { return set.Get(); }
        public void SetCallbacks(IMoveActions instance)
        {
            if (m_Wrapper.m_MoveActionsCallbackInterface != null)
            {
                @Newaction.started -= m_Wrapper.m_MoveActionsCallbackInterface.OnNewaction;
                @Newaction.performed -= m_Wrapper.m_MoveActionsCallbackInterface.OnNewaction;
                @Newaction.canceled -= m_Wrapper.m_MoveActionsCallbackInterface.OnNewaction;
            }
            m_Wrapper.m_MoveActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Newaction.started += instance.OnNewaction;
                @Newaction.performed += instance.OnNewaction;
                @Newaction.canceled += instance.OnNewaction;
            }
        }
    }
    public MoveActions @Move => new MoveActions(this);

    // Specials
    private readonly InputActionMap m_Specials;
    private ISpecialsActions m_SpecialsActionsCallbackInterface;
    private readonly InputAction m_Specials_HideUi;
    private readonly InputAction m_Specials_Scan;
    public struct SpecialsActions
    {
        private @PlayerMovement m_Wrapper;
        public SpecialsActions(@PlayerMovement wrapper) { m_Wrapper = wrapper; }
        public InputAction @HideUi => m_Wrapper.m_Specials_HideUi;
        public InputAction @Scan => m_Wrapper.m_Specials_Scan;
        public InputActionMap Get() { return m_Wrapper.m_Specials; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SpecialsActions set) { return set.Get(); }
        public void SetCallbacks(ISpecialsActions instance)
        {
            if (m_Wrapper.m_SpecialsActionsCallbackInterface != null)
            {
                @HideUi.started -= m_Wrapper.m_SpecialsActionsCallbackInterface.OnHideUi;
                @HideUi.performed -= m_Wrapper.m_SpecialsActionsCallbackInterface.OnHideUi;
                @HideUi.canceled -= m_Wrapper.m_SpecialsActionsCallbackInterface.OnHideUi;
                @Scan.started -= m_Wrapper.m_SpecialsActionsCallbackInterface.OnScan;
                @Scan.performed -= m_Wrapper.m_SpecialsActionsCallbackInterface.OnScan;
                @Scan.canceled -= m_Wrapper.m_SpecialsActionsCallbackInterface.OnScan;
            }
            m_Wrapper.m_SpecialsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @HideUi.started += instance.OnHideUi;
                @HideUi.performed += instance.OnHideUi;
                @HideUi.canceled += instance.OnHideUi;
                @Scan.started += instance.OnScan;
                @Scan.performed += instance.OnScan;
                @Scan.canceled += instance.OnScan;
            }
        }
    }
    public SpecialsActions @Specials => new SpecialsActions(this);
    public interface IMoveActions
    {
        void OnNewaction(InputAction.CallbackContext context);
    }
    public interface ISpecialsActions
    {
        void OnHideUi(InputAction.CallbackContext context);
        void OnScan(InputAction.CallbackContext context);
    }
}
